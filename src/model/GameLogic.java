package model;
import Interface.GameObserver;

import java.util.ArrayList;
import java.util.List;

/**
 * GameLogic class manages the game logic for the Game of Life.
 * It observes changes in the game board and notifies observers.
 */
public class GameLogic {
    private GameBoard board;
    private GameBoard newBoard;
    private List<GameObserver> observers = new ArrayList<>();

    /**
     * Adds an observer to the list of observers.
     *
     * @param observer the observer to add
     */
    public void addObserver(GameObserver observer) {
        observers.add(observer);
    }

    /**
     * Removes an observer from the list of observers.
     *
     * @param observer the observer to remove
     */
    public void removeObserver(GameObserver observer) {
        observers.remove(observer);
    }

    /**
     * Retrieves the list of observers.
     *
     * @return the list of observers
     */
    public List<GameObserver> getObservers() {
        return observers;
    }

    /**
     * Notifies all observers of a change in the game board.
     */
    public void notifyObservers() {
        for (GameObserver observer : observers) {
            observer.update(newBoard);
        }
    }

    /**
     * Constructs a GameLogic object with the given game board.
     *
     * @param board the initial game board
     */
    public GameLogic(GameBoard board){
        // initial game: all cells are die
        this.board = board;
    }

    /**
     * Changes the status of the cell at the specified coordinates.
     *
     * @param x the x-coordinate of the cell
     * @param y the y-coordinate of the cell
     */
    public void addCell(int x, int y){
        this.board.cellChangeState(x,y);
    }

    /**
     * Changes the status of the specified cell.
     *
     * @param cell the cell whose status to change
     */
    public void addCell(Cell cell){
        this.board.cellChangeState(cell.getX(),cell.getY());
    }

    /**
     * Generates the next game board based on the current board's state.
     */
    public void getNextBoard(){
        Generation nextGen = new Generation(board);
        nextGen.newGeneration();
        newBoard  = nextGen.getNewBoard();
    }

    /**
     * Sets the game board to the specified new board.
     *
     * @param newBoard the new game board
     */
    public void setBoard(GameBoard newBoard){
        this.board = newBoard;
    }

    /**
     * Retrieves the new game board generated by the last call to {@code getNextBoard}.
     *
     * @return the new game board
     */
    public GameBoard getNewBoard(){
        return newBoard;
    }

    /**
     * Retrieves the current game board.
     *
     * @return the current game board
     */
    public GameBoard getBoard(){
        return board;
    }

    /**
     * Resets the game board by setting all cell states to dead.
     */
    public void resetBoard(){
        for(int i = 0; i < board.getSize(); i++){
            for(int j = 0; j < board.getSize(); j++){
                board.getGrid()[i][j].setAlive(false);
            }
        }
    }
}
